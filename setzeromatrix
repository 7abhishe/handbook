#include <bits/stdc++.h>
using namespace std;
// void setzeromatrix(vector<vector<int>>  &matrix)
// {
//     int n=matrix.size();
//     int m=matrix[0].size();
//     vector<vector<int>> visited=matrix;
//     for(int i=0;i<n;i++)
//     {
//         for(int j=0;j<m;j++)
//         {
//             if(matrix[i][j]==0)
//             {
//                 for(int k=0;k<m;k++)
//                 {
//                     visited[i][k]=0;
//                 }
//             }
//         }
//     }
//     for(int i=0;i<n;i++)
//     {
//         for(int j=0;j<m;j++)
//         {
//             if(matrix[i][j]==0)
//             {
//                 for(int k=0;k<n;k++)
//                 {
//                     visited[k][j]=0;
//                 }
//             }
//         }
//     }
//     for(int i=0;i<n;i++)
//     {
//         for(int j=0;j<m;j++)
//         {
//             matrix[i][j]=visited[i][j];
//         }
//     }
// }

void setzeromatrix(vector<vector<int>>&matrix)
{
    int n=matrix.size();
    int m=matrix[0].size();
    unordered_set<int>sr;
    unordered_set<int>sc;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(matrix[i][j]==0)

            {
                sr.insert(i);
                sc.insert(j);

            }
        }

    }

    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(sr.count(i)>0 |sc.count(j)>0)
            {
                matrix[i][j]=0;
            }
        }
    }

}

int main() {
    int n, m;
    cin >> n >> m;

    // Resize the vector and initialize elements
    vector<vector<int>> a(n, vector<int>(m));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> a[i][j];
        }
    }

    // Call the function to modify the matrix
    setzeromatrix(a);

    // Print the modified matrix
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cout << a[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}
